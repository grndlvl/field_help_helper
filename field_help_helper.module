<?php

/**
 * @file
 * Field help helper main module file.
 */

/**
 * Implements hook_help().
 */
function field_help_helper_help($path, $arg) {
  switch ($path) {
    case 'admin/help#field_help_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Field help helper module adds a link to entity configurable fields so that users with the appropriate permissions may easily edit the help text and label for a field in context of where the field displays.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Editing help text and label') . '</dt>';
      $output .= '<dd>' . t("Once a user's role is given the <em>Edit field help text</em> permission any user with that permission will be able to edit the help text or label of a configurable field without having access to administer fields.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function field_help_helper_menu() {
  return array(
    'field-help-helper/%/edit' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('field_help_helper_config_field_help_form', 1),
      'access arguments' => array('edit field help text'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function field_help_helper_admin_paths() {
  return array(
    'field-help-helper/*/edit' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function field_help_helper_permission() {
  return array(
    'edit field help text' => array(
      'title' => t('Edit field help text'),
      'description' => t('Edit the help text for entity configurable fields.'),
    ),
  );
}

/**
 * Implements hook_library().
 */
function field_help_helper_library() {
  $module_path = drupal_get_path('module', 'field_help_helper');

  return array(
    'styles' => array(
      'title' => 'Field help helper: Styles',
      'version' => '1.0',
      'js' => array(
        // We want ours to come after Drupal's Field text.js.
        $module_path . '/js/script.js' => array('scope' => 'footer'),
      ),
      'css' => array(
        $module_path . '/css/fhh_style.css' => array(
          'type' => 'file',
          'media' => 'screen',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function field_help_helper_form_alter(&$form, $form_state, $form_id) {
  if (!user_access('edit field help text')) {
    return;
  }

  $form['#attached']['library'][] = array('field_help_helper', 'styles');
  if (!empty($form['#entity_type']) && !empty($form['#entity']) && $wrapper = entity_metadata_wrapper($form['#entity_type'], $form['#entity'])) {
    foreach (field_help_helper_get_fields($wrapper) as $field_name => $field) {
      $form[$field_name]['field_help_helper'] = _field_help_helper_build_description_with_edit_link($wrapper, $field_name);
    }
  }
}

/**
 * Form callback for the field help configuration form.
 */
function field_help_helper_config_field_help_form($form, &$form_state, $field_id) {
  $form = array();

  $field_config = field_help_helper_load_field_config($field_id);
  if (empty($field_config)) {
    drupal_not_found();
    exit;
  }

  $form['#entity'] =  $field_config;
  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => $field_config['label'],
    '#required' => TRUE,
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text'),
    '#default_value' => $field_config['description'],
    '#rows' => 5,
    '#description' => t('Instructions to present to the user below this field on the editing form.<br />Allowed HTML tags: @tags', array('@tags' => _field_filter_xss_display_allowed_tags())),
  );

  if (module_exists('token')) {
    // Note that the description is tokenized via token_field_widget_form_alter().
    $form['description']['#description'] .= '<br />' . t('This field supports tokens.');
    $form['description']['#element_validate'][] = 'token_element_validate';
    $form['description'] += array('#token_types' => array());

    $form['token_tree'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array(),
      '#dialog' => TRUE,
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $destination = drupal_get_destination();
  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => $destination['destination'],
  );

  return $form;
}

/**
 * Submit handler for the field help configuration form.
 */
function field_help_helper_config_field_help_form_submit($form, &$form_state) {
  $field_config = !empty($form['#entity']) ? $form['#entity'] : NULL;

  if (!empty($field_config) && $field_config = field_info_instance($field_config['entity_type'], $field_config['field_name'], $field_config['bundle'])) {
    $field_config['label'] = $form_state['values']['label'];
    $field_config['description'] = $form_state['values']['description'];

    try {
      field_update_instance($field_config);
      drupal_set_message(t('Saved %label configuration.', array('%label' => $field_config['label'])));
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
}

/**
 * Get the configurable fields for a given entity.
 *
 * @param EntityMetadataWrapper $wrapper
 *   The EMW of the entity for which to retrieve the configurable fields.
 *
 * @return array
 *    Returns an array of configurable fields for the specified entity.
 */
function field_help_helper_get_fields(EntityMetadataWrapper $wrapper) {
  return array_filter($wrapper->getPropertyInfo(), function ($value) {
    return isset($value['field']) ? $value['field'] : FALSE;
  });
}

/**
 * Retrieve the field help edit link build array.
 *
 * @param EntityMetadataWrapper $wrapper
 *   The EMW of the entity for which to generate the field help helper link.
 * @param string $field
 *   The field name for which to generate the edit link.
 *
 * @return array
 *   Returns a Drupal render array for the field help helper link.
 */
function _field_help_helper_build_description_with_edit_link(EntityMetadataWrapper $wrapper, $field) {
  $build = array();

  if ($field_id = field_help_helper_generate_field_id($wrapper, $field)) {
    $build = [
      'link' => [
        '#type' => 'link',
        '#title' => '<i class="helper"></i><span>' . t('Edit help text') . '</span>',
        '#href' => "/field-help-helper/$field_id/edit",
        '#options' => array(
          'html' => TRUE,
          'attributes' => array(
            'class' => array('field-help-helper-link'),
            'target' => '_blank',
          ),
        ),
      ],
    ];
  }

  return $build;
}

/**
 * Generate and retrieve a sudo field id that contains information necessary
 * for retrieving a field instnace and is easy to use.
 *   Example: entity_type.bundle.field_name => node.page.body
 *
 * @param EntityMetadataWrapper $wrapper
 *   The EMW of the entity for which to generate a field id.
 * @param string $field
 *   The field name for which to generate the field id.
 *
 * @return string
 *   Returns a string that represents the sudo field id.
 */
function field_help_helper_generate_field_id(EntityMetadataWrapper $wrapper, $field) {
  $field_id = array();

  // Maybe there are non-EntityDrupalWrapper wrappers that will come make it
  // here?
  if (is_a($wrapper, 'EntityDrupalWrapper')) {
    $field_id = array($wrapper->type(), $wrapper->getBundle(), $field);
  }

  return implode('.', $field_id);
}

/**
 * Load and retrieve the field configuration instance given a sudo field id.
 *
 * @param string $field_id
 *   The sudo field id that contains information necessary to retrieve a field
 *   instance.
 *     Example: entity.bundle.field_name => node.page.body
 *
 * @return array
 *   Returns the field config instance as supplied by field_info_instance().
 *
 * @see field_info_instance().
 */
function field_help_helper_load_field_config($field_id) {
  $field_config = array();
  module_load_include('inc', 'field', 'field.info');

  $parsed_field_id = field_help_helper_parse_field_id($field_id);
  if (!empty($parsed_field_id)) {
    $field_config = field_info_instance($parsed_field_id['entity_type'], $parsed_field_id['field_name'], $parsed_field_id['bundle']);
  }

  return !empty($field_config) ? $field_config : array();
}

/**
 * Parse the field id into an array that defines the entity_type, bundle, and
 * field_name of the supplied field_id.
 *
 * @param string $field_id
 *   The sudo field id that contains information necessary to retrieve a field
 *   instance.
 *     Example: entity.bundle.field_name => node.page.body
 *
 * @return array
 *   Returns an array that represents the entity_type, bundle, and field_name
 *   of the specified field_id.
 *     Example: array('entity_type' => 'node', 'bundle' => 'page', 'field_name' => body)
 */
function field_help_helper_parse_field_id($field_id) {
  $parsed_field_id = array();
  list($entity_type, $bundle, $field_name) = explode('.', $field_id);

  if (!empty($entity_type) && !empty($bundle) && !empty($field_name)) {
    $parsed_field_id = array(
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'field_name' => $field_name,
    );
  }

  return $parsed_field_id;
}
